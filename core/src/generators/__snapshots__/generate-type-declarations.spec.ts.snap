// Vitest Snapshot v1

exports[`generateTypeDeclarations > all types 1`] = `
"declare let properties: { children?: any } & Foo;

type __previewjs_Optionalize<T, K extends keyof T> = {
  [P in Exclude<__previewjs_RequiredKeys<T>, K>]: T[P]
} & {
  [P in Exclude<__previewjs_OptionalKeys<T>, K>]?: T[P]
} & {
  [P in K]?: T[P]
}
type __previewjs_RequiredKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? never : K }[keyof T];
type __previewjs_OptionalKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? K : never }[keyof T];

declare function fn<T>(name: string, returnValue?: T): () => T;

type Foo = {
              [\\"anyType\\"]?: any
[\\"unknownType\\"]?: unknown
[\\"neverType\\"]: never
[\\"voidType\\"]: void
[\\"nullType\\"]: null
[\\"booleanType\\"]: boolean
[\\"stringType\\"]: string
[\\"numberType\\"]: number
[\\"reactNodeType\\"]: any
[\\"numberLiteral\\"]: 123
[\\"stringLiteral\\"]: \\"foo\\"
[\\"trueLiteral\\"]: true
[\\"falseLiteral\\"]: false
[\\"stringEnumType\\"]: \\"A\\" | \\"B\\" | \\"C\\"
[\\"numberEnumType\\"]: 3 | 2 | 1
[\\"arrayType\\"]: Array<string>
[\\"setType\\"]: Set<string>
[\\"recordType\\"]: Record<string, number>
[\\"unionType\\"]: (string) | (number)
[\\"intersectionType\\"]: (string) & (number)
[\\"functionType\\"]?: (...params: any[]) => (string)
[\\"promiseType\\"]: Promise<string>
[\\"namedType\\"]: Bar
            }

type Bar = {
              [\\"bar\\"]: (...params: any[]) => (string)
            }"
`;

exports[`generateTypeDeclarations > duplicate types in different files 1`] = `
"declare let properties: { children?: any } & Foo;

type __previewjs_Optionalize<T, K extends keyof T> = {
  [P in Exclude<__previewjs_RequiredKeys<T>, K>]: T[P]
} & {
  [P in Exclude<__previewjs_OptionalKeys<T>, K>]?: T[P]
} & {
  [P in K]?: T[P]
}
type __previewjs_RequiredKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? never : K }[keyof T];
type __previewjs_OptionalKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? K : never }[keyof T];

declare function fn<T>(name: string, returnValue?: T): () => T;

type Foo = {
              [\\"foo\\"]: Foo_2
            }

type Foo_2 = {
              [\\"bar\\"]: Foo_3
            }

type Foo_3 = {
              [\\"baz\\"]: string
            }"
`;

exports[`generateTypeDeclarations > generic types 1`] = `
"declare let properties: { children?: any } & A;

type __previewjs_Optionalize<T, K extends keyof T> = {
  [P in Exclude<__previewjs_RequiredKeys<T>, K>]: T[P]
} & {
  [P in Exclude<__previewjs_OptionalKeys<T>, K>]?: T[P]
} & {
  [P in K]?: T[P]
}
type __previewjs_RequiredKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? never : K }[keyof T];
type __previewjs_OptionalKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? K : never }[keyof T];

declare function fn<T>(name: string, returnValue?: T): () => T;

type A<T = B,> = T

type B = {
              [\\"foo\\"]: C<B>
            }

type C<T,S = T,> = {
              [\\"t\\"]: T
[\\"s\\"]: S
            }"
`;

exports[`generateTypeDeclarations > optional props in object type 1`] = `
"declare let properties: { children?: any } & MyComponentProps;

type __previewjs_Optionalize<T, K extends keyof T> = {
  [P in Exclude<__previewjs_RequiredKeys<T>, K>]: T[P]
} & {
  [P in Exclude<__previewjs_OptionalKeys<T>, K>]?: T[P]
} & {
  [P in K]?: T[P]
}
type __previewjs_RequiredKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? never : K }[keyof T];
type __previewjs_OptionalKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? K : never }[keyof T];

declare function fn<T>(name: string, returnValue?: T): () => T;

type MyComponentProps = {
              [\\"a\\"]: string
[\\"b\\"]?: string | undefined
[\\"c\\"]?: any
[\\"d\\"]?: unknown
[\\"e\\"]: string
[\\"f\\"]?: string | undefined
            };"
`;

exports[`generateTypeDeclarations > recursive function type 1`] = `
"declare let properties: { children?: any } & MyComponentProps;

type __previewjs_Optionalize<T, K extends keyof T> = {
  [P in Exclude<__previewjs_RequiredKeys<T>, K>]: T[P]
} & {
  [P in Exclude<__previewjs_OptionalKeys<T>, K>]?: T[P]
} & {
  [P in K]?: T[P]
}
type __previewjs_RequiredKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? never : K }[keyof T];
type __previewjs_OptionalKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? K : never }[keyof T];

declare function fn<T>(name: string, returnValue?: T): () => T;

type MyComponentProps = {
              [\\"foo\\"]?: Fn
            }

type Fn = (...params: any[]) => (Fn | undefined)"
`;

exports[`generateTypeDeclarations > recursive named type 1`] = `
"declare let properties: { children?: any } & Foo;

type __previewjs_Optionalize<T, K extends keyof T> = {
  [P in Exclude<__previewjs_RequiredKeys<T>, K>]: T[P]
} & {
  [P in Exclude<__previewjs_OptionalKeys<T>, K>]?: T[P]
} & {
  [P in K]?: T[P]
}
type __previewjs_RequiredKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? never : K }[keyof T];
type __previewjs_OptionalKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? K : never }[keyof T];

declare function fn<T>(name: string, returnValue?: T): () => T;

type Foo = {
              [\\"child\\"]?: Foo | undefined
            }"
`;

exports[`generateTypeDeclarations > simple props with named type 1`] = `
"declare let properties: { children?: any } & MyComponentProps;

type __previewjs_Optionalize<T, K extends keyof T> = {
  [P in Exclude<__previewjs_RequiredKeys<T>, K>]: T[P]
} & {
  [P in Exclude<__previewjs_OptionalKeys<T>, K>]?: T[P]
} & {
  [P in K]?: T[P]
}
type __previewjs_RequiredKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? never : K }[keyof T];
type __previewjs_OptionalKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? K : never }[keyof T];

declare function fn<T>(name: string, returnValue?: T): () => T;

type MyComponentProps = {
              [\\"foo\\"]: string
            }"
`;

exports[`generateTypeDeclarations > simple props with named type 2`] = `
"declare let properties: { children?: any } & Foo;

type __previewjs_Optionalize<T, K extends keyof T> = {
  [P in Exclude<__previewjs_RequiredKeys<T>, K>]: T[P]
} & {
  [P in Exclude<__previewjs_OptionalKeys<T>, K>]?: T[P]
} & {
  [P in K]?: T[P]
}
type __previewjs_RequiredKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? never : K }[keyof T];
type __previewjs_OptionalKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? K : never }[keyof T];

declare function fn<T>(name: string, returnValue?: T): () => T;

type Foo = {
              [\\"foo\\"]: string
            }"
`;

exports[`generateTypeDeclarations > simple props with object type 1`] = `
"declare let properties: { children?: any } & MyComponentProps;

type __previewjs_Optionalize<T, K extends keyof T> = {
  [P in Exclude<__previewjs_RequiredKeys<T>, K>]: T[P]
} & {
  [P in Exclude<__previewjs_OptionalKeys<T>, K>]?: T[P]
} & {
  [P in K]?: T[P]
}
type __previewjs_RequiredKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? never : K }[keyof T];
type __previewjs_OptionalKeys<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? K : never }[keyof T];

declare function fn<T>(name: string, returnValue?: T): () => T;

type MyComponentProps = {
              [\\"foo\\"]: string
            };"
`;
